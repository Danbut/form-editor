{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","display","height","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","width","marginLeft","easeOut","enteringScreen","menuButton","marginRight","spacing","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","contentShift","editors","flex","flexDirection","breakpoints","between","App","classes","useTheme","React","useState","open","setOpen","onChange","newValue","console","log","className","CssBaseline","AppBar","position","clsx","Toolbar","IconButton","color","aria-label","onClick","edge","Menu","Typography","variant","noWrap","Drawer","anchor","paper","direction","ChevronLeft","ChevronRight","Divider","List","style","minHeight","paddingLeft","mode","name","editorProps","$blockScrolling","readOnly","Button","margin","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c7d0a925.chunk.js","sourcesContent":["import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles, useTheme, Theme, createStyles } from '@material-ui/core/styles';\r\nimport { Toolbar, IconButton, Typography, AppBar, CssBaseline, Drawer, Divider, List, Button } from '@material-ui/core';\r\nimport {\r\n    Menu as MenuIcon,\r\n    ChevronLeft as ChevronLeftIcon,\r\n    ChevronRight as ChevronRightIcon,\r\n} from '@material-ui/icons/';\r\nimport AceEditor from 'react-ace';\r\n\r\nimport 'ace-builds/src-noconflict/mode-json';\r\nimport 'ace-builds/src-noconflict/theme-github';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            height: '100vh',\r\n        },\r\n        appBar: {\r\n            transition: theme.transitions.create(['margin', 'width'], {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.leavingScreen,\r\n            }),\r\n        },\r\n        appBarShift: {\r\n            width: `calc(100% - ${drawerWidth}px)`,\r\n            marginLeft: drawerWidth,\r\n            transition: theme.transitions.create(['margin', 'width'], {\r\n                easing: theme.transitions.easing.easeOut,\r\n                duration: theme.transitions.duration.enteringScreen,\r\n            }),\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n        },\r\n        hide: {\r\n            display: 'none',\r\n        },\r\n        drawer: {\r\n            width: drawerWidth,\r\n            flexShrink: 0,\r\n        },\r\n        drawerPaper: {\r\n            width: drawerWidth,\r\n        },\r\n        drawerHeader: {\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            padding: theme.spacing(0, 1),\r\n            ...theme.mixins.toolbar,\r\n            justifyContent: 'space-between',\r\n        },\r\n        content: {\r\n            flexGrow: 1,\r\n            transition: theme.transitions.create('margin', {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.leavingScreen,\r\n            }),\r\n            marginLeft: -drawerWidth,\r\n        },\r\n        contentShift: {\r\n            transition: theme.transitions.create('margin', {\r\n                easing: theme.transitions.easing.easeOut,\r\n                duration: theme.transitions.duration.enteringScreen,\r\n            }),\r\n            marginLeft: 0,\r\n        },\r\n        editors: {\r\n            width: '100%',\r\n            height: `calc(100vh - 160px)`,\r\n            display: 'flex',\r\n            flex: '0 0 auto',\r\n            flexDirection: 'row',\r\n            justifyContent: 'space-evenly',\r\n            [theme.breakpoints.between('xs', 'md')]: {\r\n                flexDirection: 'column',\r\n            },\r\n        },\r\n    }),\r\n);\r\n\r\nconst App: React.FC = () => {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [open, setOpen] = React.useState(true);\r\n\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleDrawerClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const onChange = (newValue: any) => {\r\n        console.log('change', newValue);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline />\r\n            <AppBar\r\n                position=\"fixed\"\r\n                className={clsx(classes.appBar, {\r\n                    [classes.appBarShift]: open,\r\n                })}\r\n            >\r\n                <Toolbar>\r\n                    <IconButton\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        onClick={handleDrawerOpen}\r\n                        edge=\"start\"\r\n                        className={clsx(classes.menuButton, open && classes.hide)}\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h5\" noWrap>\r\n                        Form Editor\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Drawer\r\n                className={classes.drawer}\r\n                variant=\"persistent\"\r\n                anchor=\"left\"\r\n                open={open}\r\n                classes={{\r\n                    paper: classes.drawerPaper,\r\n                }}\r\n            >\r\n                <div className={classes.drawerHeader}>\r\n                    <Typography variant=\"h5\" noWrap>\r\n                        Commands\r\n                    </Typography>\r\n                    <IconButton onClick={handleDrawerClose}>\r\n                        {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\r\n                    </IconButton>\r\n                </div>\r\n                <Divider />\r\n                <List></List>\r\n                <Divider />\r\n                <List></List>\r\n            </Drawer>\r\n            <main\r\n                className={clsx(classes.content, {\r\n                    [classes.contentShift]: open,\r\n                })}\r\n                style={{ display: 'flex', flexDirection: 'column', minHeight: '100%' }}\r\n            >\r\n                <div className={classes.drawerHeader} />\r\n                <div className={classes.editors}>\r\n                    <div\r\n                        style={{\r\n                            width: '100%',\r\n                            height: '100%',\r\n                            display: 'flex',\r\n                            flexDirection: 'column',\r\n                            justifyContent: 'space-evenly',\r\n                        }}\r\n                    >\r\n                        <Typography variant=\"h6\" noWrap style={{ width: '50%', paddingLeft: '40px' }}>\r\n                            Command:\r\n                        </Typography>\r\n                        <AceEditor\r\n                            mode=\"json\"\r\n                            theme=\"github\"\r\n                            onChange={onChange}\r\n                            name=\"UNIQUE_ID_OF_DIV\"\r\n                            editorProps={{ $blockScrolling: true }}\r\n                            style={{ width: '100%', height: '90%' }}\r\n                        />\r\n                    </div>\r\n                    <div\r\n                        style={{\r\n                            width: '100%',\r\n                            height: '100%',\r\n                            display: 'flex',\r\n                            flexDirection: 'column',\r\n                            justifyContent: 'space-evenly',\r\n                        }}\r\n                    >\r\n                        <Typography variant=\"h6\" noWrap style={{ width: '50%', paddingLeft: '40px' }}>\r\n                            Form:\r\n                        </Typography>\r\n                        <AceEditor\r\n                            mode=\"json\"\r\n                            theme=\"github\"\r\n                            onChange={onChange}\r\n                            name=\"UNIQUE_ID_OF_DIV\"\r\n                            editorProps={{ $blockScrolling: true }}\r\n                            style={{ width: '100%', height: '90%' }}\r\n                            readOnly={true}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <Button variant=\"contained\" color=\"primary\" style={{ margin: 'auto', width: '55%' }}>\r\n                    Execute\r\n                </Button>\r\n            </main>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === '[::1]' ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. App is running in offline mode.');\r\n        });\r\n}\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}